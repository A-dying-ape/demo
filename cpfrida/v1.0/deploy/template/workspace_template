# !/usr/bin/env python
# coding=utf-8
# @Time    : 2022/04/20
# @Author  : XQE
# @Software: PyCharm


import os
import sys
import time
import json
import config
import multiprocessing
sys.path.append("..")
import control
from business import HandleBusiness


class Script(HandleBusiness):
    # script filename
    filename = str(os.path.basename(__file__).split(".")[0])

    def __init__(self):
        HandleBusiness.__init__(
            self,
            self.filename,
            os.path.join(config.project_path, "workspaces")
        )

    def hook_data(self):
        """
        hook the entrance
        """
        self.adapter_business()

    def my_message_handler(self, message, payload):
        """
        send Data receiving function
        :param message: send data
        :param payload:
        """
        if message["type"] == "send":
            try:
                self.post_response = json.loads(message["payload"])
                if control.console:
                    print(self.device, message["payload"])
                self.handle_business()
            except Exception as e:
                self.logger.error("my_message_handler error:" + str(e), exc_info=control.debug)
        else:
            self.logger.error("hook error:" + str(message), exc_info=False)
            self.unload_frida()
            self.logger.info("restart_app ... ...")
            self.restart_app()
            if self.risk_control_flag:
                self.logger.info("devices may be banned, remove the monitor option.")
                status = self.inform(self.handle_inform_text(**{"device": self.filename, "business": self.device, "business_info": self.get_response, "err_msg": str(message)}))
                self.logger.info("send inform %s ." % str(status))
                return
            else:
                if "token" in str(message) and os.path.exists(self.cookie_file):
                    os.remove(self.cookie_file)
                    self.vx_cookie = None
                    self.logger.info("the cookie has expired. obtain it again.")
                else:
                    self.risk_control_flag = True
                    time.sleep(control.hook_message_err_time)

    def run(self):
        """
        single program entry
        """
        self.logger.info("=============== start hook script ===============")
        while True:
            try:
                self.hook_data()
            except Exception as e:
                self.logger.error("script run fail: " + str(e), exc_info=control.debug)
                self.unload_frida()
                self.logger.info("restart_app ... ...")
                self.restart_app()


if __name__ == "__main__":
    Script().run()